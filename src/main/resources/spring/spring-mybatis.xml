<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 第1步：定义事务通知(主要是针对指定事务管理器对应的事务实现配置事务参数) -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 对选定的方法配置详细的事务属性 -->
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="load*" read-only="true"/>
            <tx:method name="save*" rollback-for="java.sql.SQLException,SQLException"/>
            <tx:method name="insert*" rollback-for="java.sql.SQLException,SQLException"/>
            <tx:method name="*"/>
            <!--
            <tx:method name="*"         no-rollback-for="Exception" />
            <tx:method name="*"         rollback-for="Exception" />
             -->
        </tx:attributes>
    </tx:advice>

    <!--
        面向AOP的事务配置,这里service分为两种:
        一种是和数据库操作层关联的以*Transaction 命名
        另一种是个数据库无关的,以*Service 命名
        第一个*代表所有的返回值类型 第二个*代表所有的类 第三个*代表类所有方法最后一个..代表所有的参数。
     -->
    <aop:config>
        <!--  声明事务切入点(配置哪些类的哪些方法参与事务) -->
        <aop:pointcut id="allSysMethod" expression="execution(* com.toquery.oauth2.model.sys.service..*(..))"/>
        <!-- 通知器(把事务通知绑定到切入点) -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allSysMethod"/>
    </aop:config>

    <!-- mybatis 分页拦截器 移动到mybatis配置文件里面了 09-06
    <bean id="pagingInterceptor" class="com.pansoft.everweb.interceptor.PagingInterceptor"></bean>
     -->

    <!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.pansoft.everweb.repository.mybatis"/>
        <property name="annotationClass" value="com.toquery.oauth2.core.repository.MyBatisRepository"/>
        <!--
        <property name="sqlSessionTemplateBeanName" value="sqlSession" />
         -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- MyBatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:/mybatis/config/mybatis-config.xml"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <property name="typeAliasesPackage" value="com.toquery.oauth2.model.sys.entity.po"/>
        <!-- 显式指定Mapper文件位置 -->
        <property name="mapperLocations" value="classpath:/mybatis/mapper/*.xml"/>
        <!-- 不是用spring容器管理事务
        <property name="transactionFactory">
            <bean class="org.apache.ibatis.transaction.managed.ManagedTransactionFactory" />
        </property>
         -->
        <!-- 将SessionFactory中配置拦截器，以便分页
        <property name="plugins">
            <ref bean="pagingInterceptor"/>
        </property>
        -->
    </bean>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="getExecutorType">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
        <!-- 启用批操作
            <constructor-arg index="1" value="BATCH" />
         -->
    </bean>
</beans>